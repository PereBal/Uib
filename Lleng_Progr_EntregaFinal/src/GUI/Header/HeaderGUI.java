package GUI.Header;

import GUI.Main;
import static GUI.Main.connection;
import GUI.Utils.Dialogs;
import GUI.Utils.ListFrame;
import GUI.Utils.SpringUtilities;
import Logic.NormStudy;
import Logic.SpeStudy;
import Logic.Study;
import Logic.Subject;
import Logic.Teacher;
import Utils.Calendar.Intersection;
import Utils.Exceptions.DBException;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;

/**
 *
 * @author dobleme
 */
public class HeaderGUI extends javax.swing.JPanel {

  /**
   * Creates new form Header
   *
   * @param main
   */
  public HeaderGUI(Main main) {
    this.main = main;
    modeConsulta = false;
    initComponents();
    initAuxComponents();
  }

  private void initAuxComponents() {
    // Add Popup
    popupAdd = new JPopupMenu();
    popupAdd.setBackground(new Color(241, 241, 241));
    popupAdd.setBorder(BorderFactory.createLineBorder(new Color(150, 150, 150)));

    popupAdd.add(new JMenuItem(new AbstractAction("Alta Aula") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showFormAddClassroom();
      }
    }));
    popupAdd.add(new JMenuItem(new AbstractAction("Alta Professor") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showFormAddTeacher();
      }
    }));
    popupAdd.add(new JMenuItem(new AbstractAction("Alta Assignatura") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showFormAddSubject();
      }
    }));
    popupAdd.add(new JMenuItem(new AbstractAction("Alta Estudi") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showFormAddStudy();
      }
    }));

    // Remove Popup
    popupRemove = new JPopupMenu();
    popupRemove.setBackground(new Color(241, 241, 241));
    popupRemove.setBorder(BorderFactory.createLineBorder(new Color(150, 150, 150)));
    popupRemove.add(new JMenuItem(new AbstractAction("Baixa Aula/s") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showDropClassrooms();
      }
    }));
    popupRemove.add(new JMenuItem(new AbstractAction("Baixa Professor/s") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showDropTeachers();
      }
    }));
    popupRemove.add(new JMenuItem(new AbstractAction("Baixa Estudi/s") {
      public void actionPerformed(ActionEvent e) {
        main.getBody().showDropStudies();
      }
    }));
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBox1 = new javax.swing.JComboBox();
    jButton2 = new javax.swing.JButton();
    jButton4 = new javax.swing.JButton();
    jButton5 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();

    setBackground(new java.awt.Color(241, 241, 241));
    setMaximumSize(new java.awt.Dimension(32767, 70));
    setMinimumSize(new java.awt.Dimension(1150, 70));
    setPreferredSize(new java.awt.Dimension(1150, 70));

    jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
    jComboBox1.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Consultes...", "Aula lliure", "Professor", "Estudi", "Assignatura" }));
    jComboBox1.setToolTipText("");
    jComboBox1.setMaximumSize(new java.awt.Dimension(32767, 28));
    jComboBox1.setMinimumSize(new java.awt.Dimension(432, 28));
    jComboBox1.setName(""); // NOI18N
    jComboBox1.setPreferredSize(new java.awt.Dimension(432, 26));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });

    jButton2.setBackground(new java.awt.Color(241, 241, 241));
    jButton2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Header/prova2.png"))); // NOI18N
    jButton2.setBorderPainted(false);
    jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jButton2MouseClicked(evt);
      }
    });

    jButton4.setBackground(new java.awt.Color(241, 241, 241));
    jButton4.setForeground(new java.awt.Color(0, 0, 0));
    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Header/arrow-left-bold-circle.png"))); // NOI18N
    jButton4.setBorderPainted(false);
    jButton4.setEnabled(false);
    jButton4.setMargin(new java.awt.Insets(2, 5, 2, 5));
    jButton4.setMaximumSize(new java.awt.Dimension(40, 28));
    jButton4.setMinimumSize(new java.awt.Dimension(40, 28));
    jButton4.setPreferredSize(new java.awt.Dimension(40, 28));
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });

    jButton5.setBackground(new java.awt.Color(241, 241, 241));
    jButton5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Header/prova3.png"))); // NOI18N
    jButton5.setBorderPainted(false);
    jButton5.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jButton5.setMaximumSize(new java.awt.Dimension(40, 28));
    jButton5.setMinimumSize(new java.awt.Dimension(40, 28));
    jButton5.setPreferredSize(new java.awt.Dimension(40, 28));
    jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jButton5MouseClicked(evt);
      }
    });

    jButton3.setBackground(new java.awt.Color(241, 241, 241));
    jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Header/school(1).png"))); // NOI18N
    jButton3.setBorderPainted(false);
    jButton3.setMargin(null);
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(30, 30, 30)
        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0)
        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(30, 30, 30))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jButton3)
          .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addGap(9, 9, 9)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      restartjComboBox1();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
      popupAdd.show(evt.getComponent(), -80, 35);
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
      popupRemove.show(evt.getComponent(), -100, 35);
    }//GEN-LAST:event_jButton5MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      if (!modeConsulta) {
        if (!"Consultes...".equals(jComboBox1.getSelectedItem()) && !"Aula lliure".equals(jComboBox1.getSelectedItem())) {
          tipusConsulta = (String) jComboBox1.getSelectedItem();
          jButton4.setEnabled(true);
          jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
          jComboBox1.setEditable(true);
          modeConsulta = true;
        } else if ("Aula lliure".equals(jComboBox1.getSelectedItem())) {
          availableClassrooms();
        }
      } else {
        if ("comboBoxEdited".equals(evt.getActionCommand())) {
          String model[] = null;
          switch (tipusConsulta) {
            case "Assignatura":
              model = loadSubjects((String) jComboBox1.getSelectedItem());
              break;
            case "Estudi":
              model = loadStudies((String) jComboBox1.getSelectedItem());
              break;
            case "Professor":
              model = loadTeachers((String) jComboBox1.getSelectedItem());
              break;
          }

          if (model == null) {
            restartjComboBox1();
          } else {
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(model));
            jComboBox1.setSelectedIndex(-1);
            jComboBox1.showPopup();
          }
        } else if ("comboBoxChanged".equals(evt.getActionCommand()) && jComboBox1.getSelectedIndex() != -1) {
          try {
            switch (tipusConsulta) {
              case "Assignatura":
                main.getBody().consultationSubject(listOfSubjects.get(jComboBox1.getSelectedIndex()));
                break;
              case "Estudi":
                int index;
                if (jComboBox1.getSelectedIndex() < listOfSpeStudies.size() && !listOfSpeStudies.isEmpty()) {
                  index = jComboBox1.getSelectedIndex();
                  main.getBody().consultationStudy(null, listOfSpeStudies.get(index));

                } else {
                  index = jComboBox1.getSelectedIndex() - listOfSpeStudies.size();
                  main.getBody().consultationStudy(listOfNormStudies.get(index), null);
                }
                break;
              case "Professor":
                main.getBody().consultationTeacher(listOfTeachers.get(jComboBox1.getSelectedIndex()));
                break;
            }
          } catch (NullPointerException e) {
          } finally {
            restartjComboBox1();
          }
        }
      }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      main.getBody().showHome();
    }//GEN-LAST:event_jButton3ActionPerformed

  private String[] loadSubjects(String name) {
    LinkedList<Subject> aux = new LinkedList<>();
    try {
      //connection.find
      aux = connection.findSubject(name);
    } catch (DBException ex) {
      Logger.getLogger(HeaderGUI.class.getName()).log(Level.SEVERE, null, ex);
    }

    if (aux == null) {
      aux = new LinkedList<>();
    }

    listOfSubjects = new LinkedList<>();
    for (Subject s : aux) {
      try {
        if (!Intersection.isSpeStudy(s)) {
          listOfSubjects.add(s);
        }
      } catch (DBException ex) {
        Logger.getLogger(HeaderGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    if (listOfSubjects.isEmpty()) {
      String msg = "<html>"
              + "<h4>No s'ha trobat cap assignatura amb aquest nom.</h4>"
              + "</p></html>";
      javax.swing.JLabel label = new javax.swing.JLabel(msg);
      label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
      javax.swing.JOptionPane.showMessageDialog(this, label, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return null;
    }

    String auxStr[] = new String[listOfSubjects.size()];
    int i = 0;
    for (Subject s : listOfSubjects) {
      auxStr[i] = s.getName();
      i++;

    }
    return auxStr;
  }

  private String[] loadStudies(String name) {
    listOfNormStudies = connection.findNormStudy(name);
    listOfSpeStudies = connection.findSpeStudy(name);

    if (listOfNormStudies == null && listOfSpeStudies == null) {
      String msg = "<html>"
              + "<h4>No s'ha trobat cap estudi amb aquest nom.</h4>"
              + "</p></html>";
      javax.swing.JLabel label = new javax.swing.JLabel(msg);
      label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
      javax.swing.JOptionPane.showMessageDialog(this, label, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return null;
    } else if (listOfNormStudies == null && listOfSpeStudies != null) {
      listOfNormStudies = new LinkedList<>();
    } else if (listOfNormStudies != null && listOfSpeStudies == null) {
      listOfSpeStudies = new LinkedList<>();
    }

    String aux[] = new String[listOfNormStudies.size() + listOfSpeStudies.size()];
    int i = 0;
    for (SpeStudy s : listOfSpeStudies) {
      aux[i] = s.getName();
      i++;
    }
    for (NormStudy s : listOfNormStudies) {
      aux[i] = s.getName();
      i++;
    }

    return aux;
  }

  private String[] loadTeachers(String name) {
    String teacherName[] = name.split(",");

    switch (teacherName.length) {
      case 1:
        listOfTeachers = connection.findTeacher(teacherName[0]);
        break;
      case 2:
        listOfTeachers = connection.findTeacher(teacherName[0], teacherName[1]);
        break;
      case 3:
        listOfTeachers = connection.findTeacher(teacherName[0], teacherName[1], teacherName[2]);
        break;
      default:
        String msg = "<html>"
                + "<h4>Intena introduir un valor que no pot ser cercat.</h4>"
                + "<p>"
                + "Format de cerca:"
                + "<ul>"
                + "<li>Nom"
                + "<li>Nom,primerCognom"
                + "<li>Nom,primerCognom,segonCognom"
                + "</ul>"
                + "</p></html>";
        javax.swing.JLabel label = new javax.swing.JLabel(msg);
        label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
        javax.swing.JOptionPane.showMessageDialog(this, label, "Error format cerca", javax.swing.JOptionPane.ERROR_MESSAGE);
        return null;
    }

    if (listOfTeachers == null) {
      String msg = "<html>"
              + "<h4>El professor que intenta cercar no existeix</h4>"
              + "Recordar el format de cerca:"
              + "<ul>"
              + "<li>Nom"
              + "<li>Nom,primerCognom"
              + "<li>Nom,primerCognom,segonCognom"
              + "</ul>"
              + "</p></html>";
      javax.swing.JLabel label = new javax.swing.JLabel(msg);
      label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
      javax.swing.JOptionPane.showMessageDialog(this, label, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return null;
    }

    String aux[] = new String[listOfTeachers.size()];
    int i = 0;
    for (Teacher t : listOfTeachers) {
      aux[i] = t.getName() + " " + t.getFirstName() + " - " + t.getNif();
      i++;
    }

    return aux;
  }

  private void availableClassrooms() {
    javax.swing.JLabel jLabelStartHour = new javax.swing.JLabel("Hora d'inici: ", javax.swing.JLabel.TRAILING);
    jLabelStartHour.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelEndHour = new javax.swing.JLabel("Hora de final: ", javax.swing.JLabel.TRAILING);
    jLabelEndHour.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelMorning = new javax.swing.JLabel("Torn Mati: ", javax.swing.JLabel.TRAILING);
    jLabelMorning.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelEvening = new javax.swing.JLabel("Torn Horabaixa: ", javax.swing.JLabel.TRAILING);
    jLabelEvening.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelMorningEvening = new javax.swing.JLabel("Torn Horabaixa/Mati: ", javax.swing.JLabel.TRAILING);
    jLabelMorningEvening.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelStartDate = new javax.swing.JLabel("Data d'inici: ", javax.swing.JLabel.TRAILING);
    jLabelStartDate.setFont(new java.awt.Font("Dialog", 0, 12));
    javax.swing.JLabel jLabelFinishDate = new javax.swing.JLabel("Data de final: ", javax.swing.JLabel.TRAILING);
    jLabelFinishDate.setFont(new java.awt.Font("Dialog", 0, 12));

    JSpinner jSpinnerStartHour = new JSpinner();
    jSpinnerStartHour.setModel(new javax.swing.SpinnerNumberModel(8, 8, 15, 1));
    JSpinner jSpinnerEndHour = new JSpinner();
    jSpinnerEndHour.setModel(new javax.swing.SpinnerNumberModel(9, 9, 15, 1));
    ButtonGroup group = new ButtonGroup();
    jRadioButtonMorning = new JRadioButton();
    group.add(jRadioButtonMorning);
    jRadioButtonEvening = new JRadioButton();
    group.add(jRadioButtonEvening);
    jRadioButtonMorningEvening = new JRadioButton();
    group.add(jRadioButtonMorningEvening);
    group.setSelected(jRadioButtonMorning.getModel(), true);
    jDateChooserStartDate = new com.toedter.calendar.JDateChooser();
    jDateChooserFinishDate = new com.toedter.calendar.JDateChooser();

    jDateChooserFinishDate.setEnabled(false);
    Calendar auxC = Calendar.getInstance();
    auxC.add(Calendar.DATE, 1);
    jDateChooserFinishDate.setMinSelectableDate(auxC.getTime());
    jDateChooserFinishDate.setPreferredSize(new java.awt.Dimension(90, 28));

    jDateChooserStartDate.setMinSelectableDate(auxC.getTime());
    jDateChooserStartDate.setPreferredSize(new java.awt.Dimension(90, 28));
    jDateChooserStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jDateChooserStartDatePropertyChange(evt);
      }
    });

    javax.swing.JPanel panel = new javax.swing.JPanel(new javax.swing.SpringLayout());

    panel.add(jLabelStartHour);
    jLabelStartDate.setLabelFor(jSpinnerStartHour);
    panel.add(jSpinnerStartHour);
    panel.add(jLabelEndHour);
    jLabelStartDate.setLabelFor(jSpinnerEndHour);
    panel.add(jSpinnerEndHour);

    panel.add(jLabelMorning);
    jLabelStartDate.setLabelFor(jRadioButtonMorning);
    panel.add(jRadioButtonMorning);
    panel.add(jLabelEvening);
    jLabelFinishDate.setLabelFor(jRadioButtonEvening);
    panel.add(jRadioButtonEvening);
    panel.add(jLabelMorningEvening);
    jLabelFinishDate.setLabelFor(jRadioButtonMorningEvening);
    panel.add(jRadioButtonMorningEvening);

    panel.add(jLabelStartDate);
    jLabelStartDate.setLabelFor(jDateChooserStartDate);
    panel.add(jDateChooserStartDate);
    panel.add(jLabelFinishDate);
    jLabelFinishDate.setLabelFor(jDateChooserFinishDate);
    panel.add(jDateChooserFinishDate);

    SpringUtilities.makeCompactGrid(panel, 7, 2, 4, 4, 4, 4);

    if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(this, panel, "Consulta Aula Lliure", JOptionPane.OK_CANCEL_OPTION)) {
      if (ok(jDateChooserStartDate.getCalendar(), jDateChooserFinishDate.getCalendar()) && (Integer) jSpinnerStartHour.getValue() < (Integer) jSpinnerEndHour.getValue()) {
        ArrayList<Logic.Classroom> aux = Intersection.availableClassrooms(getRadioTurn(), (Integer) jSpinnerStartHour.getValue() - 8,
                (Integer) jSpinnerEndHour.getValue() - 8, jDateChooserStartDate.getCalendar(), jDateChooserFinishDate.getCalendar());
        if (aux == null) {
          Dialogs.emptyElement(this, "Aules");
        } else {
          String strs[] = new String[aux.size()];
          for (int i = 0; i < strs.length; i++) {
            strs[i] = "Aula " + aux.get(i).getId() + " -> " + aux.get(i).getCapacity() + ", " + aux.get(i).getType();
          }

          java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              new ListFrame(strs).setVisible(true);
            }
          });
        }
      } else {
        Dialogs.wrongFormat(panel);
      }
    }
  }

  private void jDateChooserStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {
    if (jDateChooserStartDate.getCalendar() != null) {
      jDateChooserFinishDate.setEnabled(true);
    }
  }

  private boolean ok(Calendar startDate, Calendar finishDate) {
    return (startDate != null && finishDate != null && startDate.get(Calendar.DAY_OF_WEEK) != 7 && startDate.get(Calendar.DAY_OF_WEEK) != 1
            && finishDate.get(Calendar.DAY_OF_WEEK) != 7 && finishDate.get(Calendar.DAY_OF_WEEK) != 1 && startDate.compareTo(finishDate) <= 0);

  }

  private Study.Turn getRadioTurn() {
    if (jRadioButtonMorning.isSelected()) {
      return Study.Turn.morning;
    } else if (jRadioButtonEvening.isSelected()) {
      return Study.Turn.evening;
    }
    return Study.Turn.morningAndEvening;
  }

  private void restartjComboBox1() {
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Consultes...", "Aula lliure", "Professor", "Estudi", "Assignatura"}));
    jComboBox1.setSelectedIndex(0);
    jComboBox1.setEditable(false);
    jComboBox1.setVisible(true);
    jButton4.setEnabled(false);
    modeConsulta = false;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JComboBox jComboBox1;
  // End of variables declaration//GEN-END:variables
    private JPopupMenu popupAdd;
  private JPopupMenu popupRemove;
  private final Main main;
  private boolean modeConsulta;
  private String tipusConsulta = "";

  JRadioButton jRadioButtonMorning;
  JRadioButton jRadioButtonEvening;
  JRadioButton jRadioButtonMorningEvening;
  com.toedter.calendar.JDateChooser jDateChooserStartDate;
  com.toedter.calendar.JDateChooser jDateChooserFinishDate;

  private LinkedList<Teacher> listOfTeachers = null;
  private LinkedList<NormStudy> listOfNormStudies = null;
  private LinkedList<SpeStudy> listOfSpeStudies = null;
  private LinkedList<Subject> listOfSubjects = null;
}
