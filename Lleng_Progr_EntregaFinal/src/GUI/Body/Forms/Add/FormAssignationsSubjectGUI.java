/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Body.Forms.Add;

import Logic.*;
import Utils.Calendar.*;
import Utils.Exceptions.DBException;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author dobleme
 */
public class FormAssignationsSubjectGUI extends javax.swing.JPanel {

  /**
   * Creates new form FormAltaEstudi
   *
   * @param body
   * @param subject
   * @param speStudy
   * @param mod
   */
  public FormAssignationsSubjectGUI(GUI.Body.BodyGUI body, Subject subject, SpeStudy speStudy, boolean mod) {
    this.body = body;
    this.subject = subject;
    this.modification = mod;
    this.dirtyClassrooms = new ArrayList<>();
    this.freeClassrooms = new ArrayList<>();
    this.dirtyTeachers = new ArrayList<>();
    this.freeTeachers = new ArrayList<>();

    if (speStudy != null) {
      this.speStudy = speStudy;
    }

    initComponents();

    loadTeachers();
    loadFreeClassrooms();
    repaint();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonAddSubject = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFreeClassrooms = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFreeTeachers = new javax.swing.JList();
        jLabelClassroom = new javax.swing.JLabel();
        jLabelTeacher = new javax.swing.JLabel();
        jLabelRecomendation = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1150, 670));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Assignaci√≥ Aula/Professor");

        jSeparator1.setForeground(new java.awt.Color(241, 241, 241));

        jButtonAddSubject.setBackground(new java.awt.Color(0, 214, 121));
        jButtonAddSubject.setText("Tramitar Alta");
        jButtonAddSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddSubjectActionPerformed(evt);
            }
        });

        jListFreeClassrooms.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jListFreeClassrooms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFreeClassroomsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListFreeClassrooms);

        jListFreeTeachers.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jListFreeTeachers);

        jLabelClassroom.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelClassroom.setText("Aula:");

        jLabelTeacher.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelTeacher.setText("Professor:");

        jLabelRecomendation.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        jLabelRecomendation.setText("*Recomenam que el conjunt d'assignatures d'un estudi s'assignin amb la mateixa aula.");

        jButtonCancel.setBackground(new java.awt.Color(255, 51, 51));
        jButtonCancel.setText("Cancelar");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(175, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAddSubject))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelRecomendation)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelClassroom)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(44, 44, 44)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelTeacher)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelClassroom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabelTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRecomendation)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddSubject)
                    .addComponent(jButtonCancel))
                .addContainerGap(79, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListFreeClassroomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFreeClassroomsValueChanged
      loadFreeTeachers(freeClassrooms.get(jListFreeClassrooms.getSelectedIndex()));
      repaint();
      if (jListFreeTeachers.getModel().getSize() == 0) {
        String msg = "<html>"
                + "<h4>No hi ha cap professor disponible que pugui anar a aquesta aula.</h4>"
                + "<p>"
                + "Canvii d'aula."
                + "</p></html>";
        javax.swing.JLabel label = new javax.swing.JLabel(msg);
        label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
        JOptionPane.showMessageDialog(this, label, "Error Alta", JOptionPane.ERROR_MESSAGE);
      }
    }//GEN-LAST:event_jListFreeClassroomsValueChanged

    private void jButtonAddSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddSubjectActionPerformed
      SpeStudy newSpeStudy = null;

      if (jListFreeClassrooms.getSelectedIndex() == -1 || jListFreeTeachers.getSelectedIndex() == -1) {
        String msg = "<html>"
                + "<h4>No ha seleccionat cap professor o cap aula.</h4>"
                + "<p>"
                + "Seleccioni un professor i una aula."
                + "</p></html>";
        javax.swing.JLabel label = new javax.swing.JLabel(msg);
        label.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
        JOptionPane.showMessageDialog(this, label, "Error Alta", JOptionPane.ERROR_MESSAGE);
      } else {
        try {
          Classroom selectedClassroom = freeClassrooms.get(jListFreeClassrooms.getSelectedIndex());
          Teacher selectedTeacher = freeTeachers.get(jListFreeTeachers.getSelectedIndex());

          boolean map[][] = Intersection.unionOfCalendars(selectedClassroom.getCalendar(), selectedTeacher.getCalendar(), subject.getStartDate(), subject.getFinishDate());

          Intersection.reallocateSubjectCalendar(map, subject);

          subject.setClassroom(selectedClassroom);
          subject.setTeacher(selectedTeacher);
          subject.getCalendar().setSubject(subject);

          if (speStudy != null) {
            newSpeStudy = GUI.Main.connection.storeSpeStudy(new SpeStudy(GUI.Main.connection, speStudy.getName(), speStudy.getType(), subject));
          } else {
            if (!modification) {
              subject = GUI.Main.connection.storeSubject(subject);
            } else {
              if (!GUI.Main.connection.updateSubject(subject)) {
                subject = null;
              }
            }
          }
        } catch (DBException ex) {
          Logger.getLogger(FormAssignationsSubjectGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
          if (speStudy == null) {
            if (subject != null) {
              GUI.Utils.Dialogs.successfulAdd(this, "L'assignatura", subject.getName());
            } else {
              GUI.Utils.Dialogs.notSuccessfulAdd(this, "L'assignatura");
            }
            if (modification) {
              body.consultationSubject(subject);
            } else {
              body.showFormAddSubject();
            }
          } else {
            if (newSpeStudy != null) {
              GUI.Utils.Dialogs.successfulAdd(this, "L'estudi especial", subject.getName());
            } else {
              GUI.Utils.Dialogs.notSuccessfulAdd(this, "L'estudi especial");
            }
            body.showFormAddStudy();
          }
        }
      }

    }//GEN-LAST:event_jButtonAddSubjectActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
      if (speStudy != null) {
        body.showFormAddStudy();
      } else {
        if (modification) {
          body.consultationSubject(subject);
        } else {
          body.showFormAddSubject();
        }
      }
    }//GEN-LAST:event_jButtonCancelActionPerformed

  private void loadTeachers() {
    int offsetTeachers = 0;

    ArrayList<Teacher> aux = GUI.Main.connection.loadTeachers(offsetTeachers, nElems);
    while (aux != null) {
      dirtyTeachers.addAll(aux);
      offsetTeachers += aux.size();
      aux = GUI.Main.connection.loadTeachers(offsetTeachers, nElems);
    }
  }

  private void loadFreeTeachers(Classroom classroom) {
    if (dirtyTeachers != null) {
      freeTeachers = new ArrayList<>();
      dirtyTeachers.stream().forEach((t) -> {
        try {
          if (t.getCalendar() == null
                  || Intersection.availableTime(Intersection.unionOfCalendars(t.getCalendar(), classroom.getCalendar(), subject.getStartDate(), subject.getFinishDate()), subject)) {
            freeTeachers.add(t);
          }
        } catch (DBException ex) {
          Logger.getLogger(FormAssignationsSubjectGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
      });

      String strings[] = new String[freeTeachers.size()];
      for (int i = 0; i < strings.length; i++) {
        strings[i] = freeTeachers.get(i).getName() + " " + freeTeachers.get(i).getFirstName() + " -> " + freeTeachers.get(i).getNif();
      }
      jListFreeTeachers.setModel(new javax.swing.AbstractListModel() {
        @Override
        public int getSize() {
          return strings.length;
        }

        @Override
        public Object getElementAt(int i) {
          return strings[i];
        }
      });
    }
  }

  private void loadFreeClassrooms() {
    int offsetClassrooms = 0;

    ArrayList<Classroom> aux = GUI.Main.connection.loadClassrooms(offsetClassrooms, nElems);
    while (aux != null) {
      dirtyClassrooms.addAll(aux);
      offsetClassrooms += aux.size();
      aux = GUI.Main.connection.loadClassrooms(offsetClassrooms, nElems);
    }

    if (dirtyClassrooms != null) {
      freeClassrooms = new ArrayList<>();
      dirtyClassrooms.stream().forEach((classroom) -> {
        try {
          if (classroom.getCalendar() == null
                  || Intersection.availableTime(Intersection.mapOfCalendars(classroom.getCalendar(), subject.getStartDate(), subject.getFinishDate()), subject)) {
            freeClassrooms.add(classroom);
          }
        } catch (DBException ex) {
          Logger.getLogger(FormAssignationsSubjectGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
      });

      String strings[] = new String[freeClassrooms.size()];
      for (int i = 0; i < strings.length; i++) {
        strings[i] = "Aula " + freeClassrooms.get(i).getId() + " -> " + freeClassrooms.get(i).getType() + ", " + freeClassrooms.get(i).getCapacity();
      }
      jListFreeClassrooms.setModel(new javax.swing.AbstractListModel() {
        public int getSize() {
          return strings.length;
        }

        public Object getElementAt(int i) {
          return strings[i];
        }
      });
    }

  }

  public void check() {
    if (dirtyTeachers.isEmpty() || freeClassrooms.isEmpty()) {
      GUI.Utils.Dialogs.emptyElement(this, "Aules i/o Professors");
      this.body.showHome();
    }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddSubject;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelClassroom;
    private javax.swing.JLabel jLabelRecomendation;
    private javax.swing.JLabel jLabelTeacher;
    private javax.swing.JList jListFreeClassrooms;
    private javax.swing.JList jListFreeTeachers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

  private final GUI.Body.BodyGUI body;
  private Subject subject;
  private SpeStudy speStudy = null;
  private final int nElems = 30;

  private final boolean modification;

  private final ArrayList<Teacher> dirtyTeachers;
  private final ArrayList<Classroom> dirtyClassrooms;
  private ArrayList<Teacher> freeTeachers;
  private ArrayList<Classroom> freeClassrooms;
}
